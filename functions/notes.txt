Here are the gotchas:

You have to get the function.json to
put in the correct VPC stuff, or you have to reset it in aws console
every time you update.  Got it working, YES!

Everytime you make a change to the api gateway,
you have to redeploy

you have to make a new logger and point it to Stderr

You need that Request Event in order to be able to pull
out all the info from the call.
If you just base it off of the json, you'll get a
goofy Struct that has a property for each header,querystring, etc. value
instead of a map[string]string

You have to create a resource to get path variables
then you add method to those.

you have to add querystring params in the Method Request (same with Headers)

you have to add a body mapping template in the
integration request, Choose When there are no templates defined (recommended), add
a an item of application/json, choose the Method Request Pass Through Template

Create stages and staging variables so that you can pull
db configs and other such things from the request.

If you don't call the staging URL, you won't have access to the staging vars
this is confusing because at the top level you can just call the method itself, but since that isn't in a stage, you get empty vars.

The role that is created when you run the apex deploy will have to have VPC access
You'll have to learn some about IAM and security groups.

Keep things warm with a schedule trigger

You have to allow incoming traffic from your security groups
for the ports for mysql and redis

When using redis as your cache store, be sure to read this:
http://redis.io/topics/lru-cache
http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/ParameterGroups.Redis.html
https://coderanch.com/wiki/660295/Caching-Strategies
